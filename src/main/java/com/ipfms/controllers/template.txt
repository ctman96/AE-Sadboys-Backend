
//Copy, find and replace TODO, toDo, and todo, with ex. LabelColour, labelColour, labelcolour

package com.ipfms.controllers;

import com.ipfms.assembler.TODOResourceAssembler;
import com.ipfms.domain.model.TODO;
import com.ipfms.domain.repository.TODORepository;
import com.ipfms.exception.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.Resource;
import org.springframework.hateoas.Resources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

@RestController
@RequestMapping("/todos")
public class TODOController{

    private final TODORepository toDoRepository;
    private final TODOResourceAssembler toDoResourceAssembler;

    @Autowired
    public TODOController(TODOResourceAssembler resourceAssembler, TODORepository repository){
        this.toDoRepository = repository;
        this.toDoResourceAssembler = resourceAssembler;
    }

    @RequestMapping(produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Resources<TODO>> showClassHierarchies() {
        List<TODO> c = (ArrayList<TODO>) toDoRepository.findAll();
        if (c == null) {
            throw new EntityNotFoundException("No TODOs found");
        }
        Resources<TODO> resources = toDoResourceAssembler.toResources(c);
        return ResponseEntity.ok(resources);
    }


    @RequestMapping(produces = APPLICATION_JSON_VALUE, value="/{id}", method = RequestMethod.GET)
    ResponseEntity<Resource<TODO>> getTODO(@PathVariable("id") Integer id){
        TODO c = toDoRepository.findById(id);
        if (c == null) {
            throw new EntityNotFoundException("TODO not found - id: " + id);
        }
        Resource<TODO> resource = toDoResourceAssembler.toResource(c);
        return ResponseEntity.ok(resource);
    }

    @RequestMapping(method = RequestMethod.POST)
    ResponseEntity<Void> createTODO(@RequestBody TODO toDo) {
        toDoRepository.save(toDo);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    @RequestMapping(value="/{id}", method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTODO(@PathVariable("id") Integer id){
        toDoRepository.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}